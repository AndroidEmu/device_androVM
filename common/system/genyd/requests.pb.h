// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device/androVM/common/system/genyd/requests.proto

#ifndef PROTOBUF_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto__INCLUDED
#define PROTOBUF_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Genymotion {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();

class Status;
class Value;
class Parameter;
class Request;
class Reply;

enum Status_Code {
  Status_Code_Ok = 0,
  Status_Code_GenericError = 1,
  Status_Code_InvalidRequest = 2,
  Status_Code_OkWithInformation = 3,
  Status_Code_NotImplemented = 4
};
bool Status_Code_IsValid(int value);
const Status_Code Status_Code_Code_MIN = Status_Code_Ok;
const Status_Code Status_Code_Code_MAX = Status_Code_NotImplemented;
const int Status_Code_Code_ARRAYSIZE = Status_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_Code_descriptor();
inline const ::std::string& Status_Code_Name(Status_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_Code_descriptor(), value);
}
inline bool Status_Code_Parse(
    const ::std::string& name, Status_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_Code>(
    Status_Code_descriptor(), name, value);
}
enum Value_Type {
  Value_Type_Bool = 1,
  Value_Type_Int = 2,
  Value_Type_Float = 3,
  Value_Type_String = 4,
  Value_Type_Bytes = 5
};
bool Value_Type_IsValid(int value);
const Value_Type Value_Type_Type_MIN = Value_Type_Bool;
const Value_Type Value_Type_Type_MAX = Value_Type_Bytes;
const int Value_Type_Type_ARRAYSIZE = Value_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Value_Type_descriptor();
inline const ::std::string& Value_Type_Name(Value_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Value_Type_descriptor(), value);
}
inline bool Value_Type_Parse(
    const ::std::string& name, Value_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Value_Type>(
    Value_Type_descriptor(), name, value);
}
enum Parameter_Type {
  Parameter_Type_None = 0,
  Parameter_Type_AndroidVersion = 1,
  Parameter_Type_BuildNumber = 2,
  Parameter_Type_BatteryMode = 3,
  Parameter_Type_BatteryLevel = 4,
  Parameter_Type_BatteryStatus = 5,
  Parameter_Type_GpsStatus = 6,
  Parameter_Type_GpsLatitude = 7,
  Parameter_Type_GpsLongitude = 8,
  Parameter_Type_GpsAltitude = 9,
  Parameter_Type_GpsAccuracy = 10,
  Parameter_Type_GpsBearing = 11,
  Parameter_Type_Accelerometer = 12,
  Parameter_Type_GenymotionVersion = 13,
  Parameter_Type_Capabilities = 14,
  Parameter_Type_FileName = 15,
  Parameter_Type_Clipboard = 16
};
bool Parameter_Type_IsValid(int value);
const Parameter_Type Parameter_Type_Type_MIN = Parameter_Type_None;
const Parameter_Type Parameter_Type_Type_MAX = Parameter_Type_Clipboard;
const int Parameter_Type_Type_ARRAYSIZE = Parameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Parameter_Type_descriptor();
inline const ::std::string& Parameter_Type_Name(Parameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Parameter_Type_descriptor(), value);
}
inline bool Parameter_Type_Parse(
    const ::std::string& name, Parameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Parameter_Type>(
    Parameter_Type_descriptor(), name, value);
}
enum Request_Type {
  Request_Type_None = 0,
  Request_Type_Ping = 1,
  Request_Type_GetParam = 2,
  Request_Type_SetParam = 3,
  Request_Type_CheckArchive = 4,
  Request_Type_FlashArchive = 5,
  Request_Type_PushData = 6
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_None;
const Request_Type Request_Type_Type_MAX = Request_Type_PushData;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Reply_Type {
  Reply_Type_None = 0,
  Reply_Type_Error = 1,
  Reply_Type_Pong = 2,
  Reply_Type_Value = 3
};
bool Reply_Type_IsValid(int value);
const Reply_Type Reply_Type_Type_MIN = Reply_Type_None;
const Reply_Type Reply_Type_Type_MAX = Reply_Type_Value;
const int Reply_Type_Type_ARRAYSIZE = Reply_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Type_descriptor();
inline const ::std::string& Reply_Type_Name(Reply_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Type_descriptor(), value);
}
inline bool Reply_Type_Parse(
    const ::std::string& name, Reply_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Type>(
    Reply_Type_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();
  
  Status(const Status& from);
  
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();
  
  void Swap(Status* other);
  
  // implements Message ----------------------------------------------
  
  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Status_Code Code;
  static const Code Ok = Status_Code_Ok;
  static const Code GenericError = Status_Code_GenericError;
  static const Code InvalidRequest = Status_Code_InvalidRequest;
  static const Code OkWithInformation = Status_Code_OkWithInformation;
  static const Code NotImplemented = Status_Code_NotImplemented;
  static inline bool Code_IsValid(int value) {
    return Status_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Status_Code_Code_MIN;
  static const Code Code_MAX =
    Status_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Status_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Status_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Status_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Status_Code_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Genymotion.Status.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::Genymotion::Status_Code code() const;
  inline void set_code(::Genymotion::Status_Code value);
  
  // optional string description = 3 [default = ""];
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  
  // @@protoc_insertion_point(class_scope:Genymotion.Status)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int code_;
  ::std::string* description_;
  static const ::std::string _default_description_;
  friend void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();
  
  Value(const Value& from);
  
  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();
  
  void Swap(Value* other);
  
  // implements Message ----------------------------------------------
  
  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Value_Type Type;
  static const Type Bool = Value_Type_Bool;
  static const Type Int = Value_Type_Int;
  static const Type Float = Value_Type_Float;
  static const Type String = Value_Type_String;
  static const Type Bytes = Value_Type_Bytes;
  static inline bool Type_IsValid(int value) {
    return Value_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Value_Type_Type_MIN;
  static const Type Type_MAX =
    Value_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Value_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Value_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Value_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Value_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Genymotion.Value.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Genymotion::Value_Type type() const;
  inline void set_type(::Genymotion::Value_Type value);
  
  // optional bool boolValue = 2;
  inline bool has_boolvalue() const;
  inline void clear_boolvalue();
  static const int kBoolValueFieldNumber = 2;
  inline bool boolvalue() const;
  inline void set_boolvalue(bool value);
  
  // optional int32 intValue = 3;
  inline bool has_intvalue() const;
  inline void clear_intvalue();
  static const int kIntValueFieldNumber = 3;
  inline ::google::protobuf::int32 intvalue() const;
  inline void set_intvalue(::google::protobuf::int32 value);
  
  // optional float floatValue = 4;
  inline bool has_floatvalue() const;
  inline void clear_floatvalue();
  static const int kFloatValueFieldNumber = 4;
  inline float floatvalue() const;
  inline void set_floatvalue(float value);
  
  // optional string stringValue = 5;
  inline bool has_stringvalue() const;
  inline void clear_stringvalue();
  static const int kStringValueFieldNumber = 5;
  inline const ::std::string& stringvalue() const;
  inline void set_stringvalue(const ::std::string& value);
  inline void set_stringvalue(const char* value);
  inline void set_stringvalue(const char* value, size_t size);
  inline ::std::string* mutable_stringvalue();
  
  // optional bytes bytesValue = 6;
  inline bool has_bytesvalue() const;
  inline void clear_bytesvalue();
  static const int kBytesValueFieldNumber = 6;
  inline const ::std::string& bytesvalue() const;
  inline void set_bytesvalue(const ::std::string& value);
  inline void set_bytesvalue(const char* value);
  inline void set_bytesvalue(const void* value, size_t size);
  inline ::std::string* mutable_bytesvalue();
  
  // @@protoc_insertion_point(class_scope:Genymotion.Value)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  bool boolvalue_;
  ::google::protobuf::int32 intvalue_;
  float floatvalue_;
  ::std::string* stringvalue_;
  static const ::std::string _default_stringvalue_;
  ::std::string* bytesvalue_;
  static const ::std::string _default_bytesvalue_;
  friend void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message {
 public:
  Parameter();
  virtual ~Parameter();
  
  Parameter(const Parameter& from);
  
  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();
  
  void Swap(Parameter* other);
  
  // implements Message ----------------------------------------------
  
  Parameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Parameter_Type Type;
  static const Type None = Parameter_Type_None;
  static const Type AndroidVersion = Parameter_Type_AndroidVersion;
  static const Type BuildNumber = Parameter_Type_BuildNumber;
  static const Type BatteryMode = Parameter_Type_BatteryMode;
  static const Type BatteryLevel = Parameter_Type_BatteryLevel;
  static const Type BatteryStatus = Parameter_Type_BatteryStatus;
  static const Type GpsStatus = Parameter_Type_GpsStatus;
  static const Type GpsLatitude = Parameter_Type_GpsLatitude;
  static const Type GpsLongitude = Parameter_Type_GpsLongitude;
  static const Type GpsAltitude = Parameter_Type_GpsAltitude;
  static const Type GpsAccuracy = Parameter_Type_GpsAccuracy;
  static const Type GpsBearing = Parameter_Type_GpsBearing;
  static const Type Accelerometer = Parameter_Type_Accelerometer;
  static const Type GenymotionVersion = Parameter_Type_GenymotionVersion;
  static const Type Capabilities = Parameter_Type_Capabilities;
  static const Type FileName = Parameter_Type_FileName;
  static const Type Clipboard = Parameter_Type_Clipboard;
  static inline bool Type_IsValid(int value) {
    return Parameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Parameter_Type_Type_MIN;
  static const Type Type_MAX =
    Parameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Parameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Parameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Parameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Parameter_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Genymotion.Parameter.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Genymotion::Parameter_Type type() const;
  inline void set_type(::Genymotion::Parameter_Type value);
  
  // optional .Genymotion.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Genymotion::Value& value() const;
  inline ::Genymotion::Value* mutable_value();
  
  // @@protoc_insertion_point(class_scope:Genymotion.Parameter)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::Genymotion::Value* value_;
  friend void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Request_Type Type;
  static const Type None = Request_Type_None;
  static const Type Ping = Request_Type_Ping;
  static const Type GetParam = Request_Type_GetParam;
  static const Type SetParam = Request_Type_SetParam;
  static const Type CheckArchive = Request_Type_CheckArchive;
  static const Type FlashArchive = Request_Type_FlashArchive;
  static const Type PushData = Request_Type_PushData;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Genymotion.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Genymotion::Request_Type type() const;
  inline void set_type(::Genymotion::Request_Type value);
  
  // optional .Genymotion.Parameter parameter = 2;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 2;
  inline const ::Genymotion::Parameter& parameter() const;
  inline ::Genymotion::Parameter* mutable_parameter();
  
  // @@protoc_insertion_point(class_scope:Genymotion.Request)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::Genymotion::Parameter* parameter_;
  friend void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();
  
  Reply(const Reply& from);
  
  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();
  
  void Swap(Reply* other);
  
  // implements Message ----------------------------------------------
  
  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Reply_Type Type;
  static const Type None = Reply_Type_None;
  static const Type Error = Reply_Type_Error;
  static const Type Pong = Reply_Type_Pong;
  static const Type Value = Reply_Type_Value;
  static inline bool Type_IsValid(int value) {
    return Reply_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Reply_Type_Type_MIN;
  static const Type Type_MAX =
    Reply_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Reply_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Reply_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Reply_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Reply_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Genymotion.Reply.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Genymotion::Reply_Type type() const;
  inline void set_type(::Genymotion::Reply_Type value);
  
  // required .Genymotion.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::Genymotion::Status& status() const;
  inline ::Genymotion::Status* mutable_status();
  
  // optional .Genymotion.Value value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::Genymotion::Value& value() const;
  inline ::Genymotion::Value* mutable_value();
  
  // @@protoc_insertion_point(class_scope:Genymotion.Reply)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::Genymotion::Status* status_;
  ::Genymotion::Value* value_;
  friend void  protobuf_AddDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_AssignDesc_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  friend void protobuf_ShutdownFile_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// Status

// required .Genymotion.Status.Code code = 2;
inline bool Status::has_code() const {
  return _has_bit(0);
}
inline void Status::clear_code() {
  code_ = 0;
  _clear_bit(0);
}
inline ::Genymotion::Status_Code Status::code() const {
  return static_cast< ::Genymotion::Status_Code >(code_);
}
inline void Status::set_code(::Genymotion::Status_Code value) {
  GOOGLE_DCHECK(::Genymotion::Status_Code_IsValid(value));
  _set_bit(0);
  code_ = value;
}

// optional string description = 3 [default = ""];
inline bool Status::has_description() const {
  return _has_bit(1);
}
inline void Status::clear_description() {
  if (description_ != &_default_description_) {
    description_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Status::description() const {
  return *description_;
}
inline void Status::set_description(const ::std::string& value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Status::set_description(const char* value) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Status::set_description(const char* value, size_t size) {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_description() {
  _set_bit(1);
  if (description_ == &_default_description_) {
    description_ = new ::std::string;
  }
  return description_;
}

// -------------------------------------------------------------------

// Value

// required .Genymotion.Value.Type type = 1;
inline bool Value::has_type() const {
  return _has_bit(0);
}
inline void Value::clear_type() {
  type_ = 1;
  _clear_bit(0);
}
inline ::Genymotion::Value_Type Value::type() const {
  return static_cast< ::Genymotion::Value_Type >(type_);
}
inline void Value::set_type(::Genymotion::Value_Type value) {
  GOOGLE_DCHECK(::Genymotion::Value_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional bool boolValue = 2;
inline bool Value::has_boolvalue() const {
  return _has_bit(1);
}
inline void Value::clear_boolvalue() {
  boolvalue_ = false;
  _clear_bit(1);
}
inline bool Value::boolvalue() const {
  return boolvalue_;
}
inline void Value::set_boolvalue(bool value) {
  _set_bit(1);
  boolvalue_ = value;
}

// optional int32 intValue = 3;
inline bool Value::has_intvalue() const {
  return _has_bit(2);
}
inline void Value::clear_intvalue() {
  intvalue_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Value::intvalue() const {
  return intvalue_;
}
inline void Value::set_intvalue(::google::protobuf::int32 value) {
  _set_bit(2);
  intvalue_ = value;
}

// optional float floatValue = 4;
inline bool Value::has_floatvalue() const {
  return _has_bit(3);
}
inline void Value::clear_floatvalue() {
  floatvalue_ = 0;
  _clear_bit(3);
}
inline float Value::floatvalue() const {
  return floatvalue_;
}
inline void Value::set_floatvalue(float value) {
  _set_bit(3);
  floatvalue_ = value;
}

// optional string stringValue = 5;
inline bool Value::has_stringvalue() const {
  return _has_bit(4);
}
inline void Value::clear_stringvalue() {
  if (stringvalue_ != &_default_stringvalue_) {
    stringvalue_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Value::stringvalue() const {
  return *stringvalue_;
}
inline void Value::set_stringvalue(const ::std::string& value) {
  _set_bit(4);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(value);
}
inline void Value::set_stringvalue(const char* value) {
  _set_bit(4);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(value);
}
inline void Value::set_stringvalue(const char* value, size_t size) {
  _set_bit(4);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  stringvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_stringvalue() {
  _set_bit(4);
  if (stringvalue_ == &_default_stringvalue_) {
    stringvalue_ = new ::std::string;
  }
  return stringvalue_;
}

// optional bytes bytesValue = 6;
inline bool Value::has_bytesvalue() const {
  return _has_bit(5);
}
inline void Value::clear_bytesvalue() {
  if (bytesvalue_ != &_default_bytesvalue_) {
    bytesvalue_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Value::bytesvalue() const {
  return *bytesvalue_;
}
inline void Value::set_bytesvalue(const ::std::string& value) {
  _set_bit(5);
  if (bytesvalue_ == &_default_bytesvalue_) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(value);
}
inline void Value::set_bytesvalue(const char* value) {
  _set_bit(5);
  if (bytesvalue_ == &_default_bytesvalue_) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(value);
}
inline void Value::set_bytesvalue(const void* value, size_t size) {
  _set_bit(5);
  if (bytesvalue_ == &_default_bytesvalue_) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_bytesvalue() {
  _set_bit(5);
  if (bytesvalue_ == &_default_bytesvalue_) {
    bytesvalue_ = new ::std::string;
  }
  return bytesvalue_;
}

// -------------------------------------------------------------------

// Parameter

// required .Genymotion.Parameter.Type type = 1;
inline bool Parameter::has_type() const {
  return _has_bit(0);
}
inline void Parameter::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::Genymotion::Parameter_Type Parameter::type() const {
  return static_cast< ::Genymotion::Parameter_Type >(type_);
}
inline void Parameter::set_type(::Genymotion::Parameter_Type value) {
  GOOGLE_DCHECK(::Genymotion::Parameter_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional .Genymotion.Value value = 2;
inline bool Parameter::has_value() const {
  return _has_bit(1);
}
inline void Parameter::clear_value() {
  if (value_ != NULL) value_->::Genymotion::Value::Clear();
  _clear_bit(1);
}
inline const ::Genymotion::Value& Parameter::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Genymotion::Value* Parameter::mutable_value() {
  _set_bit(1);
  if (value_ == NULL) value_ = new ::Genymotion::Value;
  return value_;
}

// -------------------------------------------------------------------

// Request

// required .Genymotion.Request.Type type = 1;
inline bool Request::has_type() const {
  return _has_bit(0);
}
inline void Request::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::Genymotion::Request_Type Request::type() const {
  return static_cast< ::Genymotion::Request_Type >(type_);
}
inline void Request::set_type(::Genymotion::Request_Type value) {
  GOOGLE_DCHECK(::Genymotion::Request_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional .Genymotion.Parameter parameter = 2;
inline bool Request::has_parameter() const {
  return _has_bit(1);
}
inline void Request::clear_parameter() {
  if (parameter_ != NULL) parameter_->::Genymotion::Parameter::Clear();
  _clear_bit(1);
}
inline const ::Genymotion::Parameter& Request::parameter() const {
  return parameter_ != NULL ? *parameter_ : *default_instance_->parameter_;
}
inline ::Genymotion::Parameter* Request::mutable_parameter() {
  _set_bit(1);
  if (parameter_ == NULL) parameter_ = new ::Genymotion::Parameter;
  return parameter_;
}

// -------------------------------------------------------------------

// Reply

// required .Genymotion.Reply.Type type = 1;
inline bool Reply::has_type() const {
  return _has_bit(0);
}
inline void Reply::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::Genymotion::Reply_Type Reply::type() const {
  return static_cast< ::Genymotion::Reply_Type >(type_);
}
inline void Reply::set_type(::Genymotion::Reply_Type value) {
  GOOGLE_DCHECK(::Genymotion::Reply_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required .Genymotion.Status status = 2;
inline bool Reply::has_status() const {
  return _has_bit(1);
}
inline void Reply::clear_status() {
  if (status_ != NULL) status_->::Genymotion::Status::Clear();
  _clear_bit(1);
}
inline const ::Genymotion::Status& Reply::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Genymotion::Status* Reply::mutable_status() {
  _set_bit(1);
  if (status_ == NULL) status_ = new ::Genymotion::Status;
  return status_;
}

// optional .Genymotion.Value value = 3;
inline bool Reply::has_value() const {
  return _has_bit(2);
}
inline void Reply::clear_value() {
  if (value_ != NULL) value_->::Genymotion::Value::Clear();
  _clear_bit(2);
}
inline const ::Genymotion::Value& Reply::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Genymotion::Value* Reply::mutable_value() {
  _set_bit(2);
  if (value_ == NULL) value_ = new ::Genymotion::Value;
  return value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Genymotion

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Genymotion::Status_Code>() {
  return ::Genymotion::Status_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Genymotion::Value_Type>() {
  return ::Genymotion::Value_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Genymotion::Parameter_Type>() {
  return ::Genymotion::Parameter_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Genymotion::Request_Type>() {
  return ::Genymotion::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Genymotion::Reply_Type>() {
  return ::Genymotion::Reply_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_2fandroVM_2fcommon_2fsystem_2fgenyd_2frequests_2eproto__INCLUDED
